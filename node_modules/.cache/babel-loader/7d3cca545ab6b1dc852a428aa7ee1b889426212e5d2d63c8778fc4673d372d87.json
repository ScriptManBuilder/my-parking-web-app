{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\myparking\\\\src\\\\mainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './mainPage.css'; // Подключаем стили\nimport ToDoAdd from \"./toDoAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [colors, setColors] = useState(Array(15).fill('gray'));\n  const [responseMessage, setResponseMessage] = useState(\"\"); // Храним ответ от сервера\n\n  const handleClick = index => {\n    const newColors = [...colors];\n    newColors[index] = newColors[index] === 'gray' ? 'blue' : 'gray';\n    setColors(newColors);\n  };\n\n  // Функция отправки AJAX-запроса\n  const handleSendRequest = async () => {\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: \"Test Request\",\n          body: \"Hello world!\",\n          userId: 1\n        })\n      });\n      const data = await response.json(); // Читаем JSON-ответ\n      setResponseMessage(`Response: ${JSON.stringify(data)}`); // Сохраняем в state\n    } catch (error) {\n      console.error(\"Error sending request:\", error);\n      setResponseMessage(\"Failed to send request.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Home Page!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have successfully logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          backgroundColor: color\n        },\n        onClick: () => handleClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoAdd, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sendButton\",\n      onClick: handleSendRequest,\n      children: \"Send Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"rGMsDvgBnJvAmvFoi2SN1HZ1FVs=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","ToDoAdd","jsxDEV","_jsxDEV","MainPage","_s","colors","setColors","Array","fill","responseMessage","setResponseMessage","handleClick","index","newColors","handleSendRequest","response","fetch","method","headers","body","JSON","stringify","title","userId","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","color","style","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/myparking/src/mainPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './mainPage.css'; // Подключаем стили\r\nimport ToDoAdd from \"./toDoAdd\";\r\n\r\nfunction MainPage() {\r\n  const [colors, setColors] = useState(Array(15).fill('gray'));\r\n  const [responseMessage, setResponseMessage] = useState(\"\"); // Храним ответ от сервера\r\n\r\n  const handleClick = (index) => {\r\n    const newColors = [...colors];\r\n    newColors[index] = newColors[index] === 'gray' ? 'blue' : 'gray';\r\n    setColors(newColors);\r\n  };\r\n\r\n  // Функция отправки AJAX-запроса\r\n  const handleSendRequest = async () => {\r\n    try {\r\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ title: \"Test Request\", body: \"Hello world!\", userId: 1 }),\r\n      });\r\n\r\n      const data = await response.json(); // Читаем JSON-ответ\r\n      setResponseMessage(`Response: ${JSON.stringify(data)}`); // Сохраняем в state\r\n    } catch (error) {\r\n      console.error(\"Error sending request:\", error);\r\n      setResponseMessage(\"Failed to send request.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Welcome to the Home Page!</h1>\r\n      <p>You have successfully logged in.</p>\r\n\r\n      <div className=\"grid\">\r\n        {colors.map((color, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"square\"\r\n            style={{ backgroundColor: color }}\r\n            onClick={() => handleClick(index)}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <ToDoAdd />\r\n\r\n      {/* Кнопка отправки запроса */}\r\n      <button className=\"sendButton\" onClick={handleSendRequest}>\r\n        Send Request\r\n      </button>\r\n\r\n      {/* Выводим ответ от сервера */}\r\n      {responseMessage && <p>{responseMessage}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}